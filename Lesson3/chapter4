progma solidity >=0.5.0 <0.5.0 <0.6.6;

contract ZombieFactory;
 
  event NewZombie (uint zombieId, string name , uint dna);

  uint danaDigits = 16;
  uint dnaModulos = 10 ** dnaDigits;

  //1. Define 'cooldonwTime' here 
   uint coolDownTime =  1 days;

  struct Zombie {
     string name ;
     uint dna;
     // add new data here

     uint32 level;
     uint32 readyTime;

  }

  Zombie[] public zombies;

  //declare mappings here
  mappings (uint => address) zombieToOwner;
  mappings( address => uint) ownerZombieCount;

  function _createZombie ( string memory _name, uint _dna) private {
     
      
     
      uint id = zombies.push(Zombie (_name, _dna, 1 ,uint32(now + cooldownTime))) - 1;
       
       zombieToOwner[id] =msg.sender;
       owerZombieCount[mdg.sender]++;
       emit NewZombie(id, _name, _dna);
  }
   function _generateRondonDna ( string memory _str ) private  view returs (uint){
        
        uint rand = Keccak256 (abi.encodePacked(_srt));
        returs rand % dnaModulus;

    }
       function createRandomZombie (string memory _name) public {
          // star here
          require(owerZombieCount[msg.sender]== 0);
          uint nameDna = generateRondomDna (name);
          _createZombie(name , namedNa);
       }
    
    // start here
    contract ZombieFeeding is ZombieFactory {
        
    }
 