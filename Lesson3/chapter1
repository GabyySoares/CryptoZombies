progma solidity >=0.5.0 <0.6.0;

//put import statement here
import "./zombiefactory.sol";

// Create KittyInterface here
contract KittyInterface {
  function getKitty(uint _id) external view returns (
    bool isGestating,
    bool isReady,
    uint256 cooldownIndex,
    uint256 nextActionAt,
    uint256 siringWithId,
    uint256 birthTime,
    uint256 matronId,
    uint256 generation,
    uint256 genes
  );
}


  

contract ZombieFeeding is ZombieFactory {
    //1. remove this:

    //2. change this to just a declaration:
    KittyInterface  KittyContract;

   //3. Add setKittyContractAddress method here
   function setKittyContractAddres (addres _address) external {
     KittyContract = KittyInterface(_address);
   }

// star here
function feedAndMultiply(uint _zombieId, uint _targetDna, string memory _species) public {
  require(msg.sender ==zombieToOwner[_zombieId]);
  Zombie storage myZombie = zombies [_zombieId];

  targetDna=  targetDna % dnaModulos;
  uint newDna = (myZombie.dna + targetDna) / 2;
   //Add an if statement here
   if (Keccak256(abi.encodePacked(_species))) == Keccak256(abi.encodePacked("Ketty"));
     newDna = newDna - newDna % 100 + 99;
  _createZombie("NpName", newDna);
}
  //definw function here 
  function feedOnKitty(uint _zombieId, uint _KittyId) public {
    uint KittyDna;
    (.........KittyDna) = KittyContract.getKitty( _KittyId);
    feedAndMultiply(_zombieId, KittyDna, Kitty);
  }
}